data_rm_na <- data[-index_na, ]
tdvn <- as.numeric(data[, 2]);
tdyh <- as.numeric(data[, 3]);
ratio_rm_na <- tdyh/tdvn;
dim(data)
tdvn <- as.numeric(data[, 2]);
tdyh <- as.numeric(data[, 3]);
ratio <- tdyh/tdvn;
index_na <- which(ratio == "NaN");
data_rm_na <- data[-index_na, ]
tdvn <- as.numeric(data[, 2]);
tdyh <- as.numeric(data[, 3]);
ratio_rm_na <- tdyh/tdvn;
dim(data)
dim(index_na)
length(index_na)
data <- read.csv("output_count.csv", sep = ",", fileEncoding  = "utf8", header = TRUE)
dim(data)
data <- read.csv("output_count.csv", sep = ",", fileEncoding  = "utf8", header = TRUE)
dim(data)
data <- read.csv(file = "output_count.csv", sep = ",", fileEncoding  = "utf8", header = TRUE)
dim(data)
library(readr)
data <- read_csv(file = "output_count.csv", sep = ",", fileEncoding  = "utf8", header = TRUE)
read_csv()
data <- read_csv(file = "output_count.csv")
dim(data)
data[, 1]
class(data)
data[, 1]
data[1, ]
data <- read.csv(file = "output_count.csv", locale = readr::locale(encoding = "UTF-8"))
data <- read_csv(file = "output_count.csv", locale = readr::locale(encoding = "UTF-8"))
dim(data)
problems()
problems(data)
data <- read_csv(file = "output_count.csv", quote = ",", locale = readr::locale(encoding = "UTF-8"))
dim(data)
data <- read_csv(file = "output_count.csv", sep=",", header=TRUE)
data <- read.csv(file = "output_count.csv", sep=",", header=TRUE)
dim(data)
tdvn <- as.numeric(data[, 2]);
tdyh <- as.numeric(data[, 3]);
ratio <- tdyh/tdvn;
index_na <- which(ratio == "NaN");
data_rm_na <- data[-index_na, ]
tdvn <- as.numeric(data[, 2]);
tdyh <- as.numeric(data[, 3]);
ratio_rm_na <- tdyh/tdvn;
dim(data)
tdvn <- as.numeric(data[, 2]);
tdyh <- as.numeric(data[, 3]);
ratio <- tdyh/tdvn;
index_na <- which(ratio == "NaN");
data_rm_na <- data[-index_na, ]
tdvn <- as.numeric(data[, 2]);
tdyh <- as.numeric(data[, 3]);
ratio_rm_na <- tdyh/tdvn;
dim(data_rm_na)
length(index_na)
ratio
density(ratio)
quantile(ratio)
which.max(ratio)
data[18964]
data[18964,]
tdyh[18964]
tdvn[18964]
data$file_path <- enc2utf8(data$file_path)
data$file_path <- enc2utf8(as.charactor(data$file_path))
data$file_path <- enc2utf8(as.character(data$file_path))
data[1864, ]
data[18964, ]
which(ratio > 1)
length(which(ratio > 1))
data <- read.csv(file = "output_count.csv", sep=",,,,", header=TRUE)
data <- read.csv(file = "output_count.csv", sep="+", header=TRUE)
dim(data)
data <- read.csv(file = "output_count.csv", sep="+", header=TRUE)
data <- read.csv(file = "output_count.csv", sep="+", header=TRUE)
dim(data)
tdvn <- as.numeric(data[, 2]);
tdyh <- as.numeric(data[, 3]);
ratio <- tdyh/tdvn;
index_na <- which(ratio == "NaN");
data_rm_na <- data[-index_na, ]
tdvn <- as.numeric(data[, 2]);
tdyh <- as.numeric(data[, 3]);
ratio_rm_na <- tdyh/tdvn;
dim(data_rm_na)
density(ratio_rm_na)
tdvn <- as.numeric(data[, 2]);
tdyh <- as.numeric(data[, 3]);
ratio <- tdyh/tdvn;
index_na <- which(ratio == "NaN");
data_rm_na <- data[-index_na, ]
tdvn <- as.numeric(data_rm_na[, 2]);
tdyh <- as.numeric(data_rm_na[, 3]);
ratio_rm_na <- tdyh/tdvn;
dim(data_rm_na)
density(ratio_rm_na)
plot(density(ratio_rm_na))
quantile(ratio_rm_na)
which(ratio_rm_na == "Inf")
data_rm_na[8351,]
ratio_rm_na <- ratio_rm_na[-which(ratio_rm_na == "Inf")]
hist(ratio_rm_na)
quantile(ratio_rm_na)
which(ratio_rm_na > 1)
data <- read.csv(file = "output_count.csv", sep="+", header=TRUE)
dim(data)
tdvn <- as.numeric(data[, 2]);
tdyh <- as.numeric(data[, 3]);
ratio <- tdyh/tdvn;
index_na <- which(ratio == "NaN");
index_inf <- which(ratio == "Inf");
data_rm_na <- data[-c(index_inf, index_na), ];
tdvn <- as.numeric(data_rm_na[, 2]);
tdyh <- as.numeric(data_rm_na[, 3]);
ratio_rm_na <- tdyh/tdvn;
dim(data_rm_na)
ratio_rm_na > 0
ratio_rm_na > 1
g_1 <- which(ratio_rm_na > 1)
g_1
data_rm_na[5483, ]
data <- read.csv(file = "output_count.csv", sep="+", header=TRUE)
dim(data)
tdvn <- as.numeric(data[, 2]);
tdyh <- as.numeric(data[, 3]);
ratio <- tdyh/tdvn;
index_na <- which(ratio == "NaN");
index_inf <- which(ratio == "Inf");
index_g1 <- which(ratio >= 1)
data_rm_na <- data[-c(index_inf, index_na, index_g1), ];
tdvn <- as.numeric(data_rm_na[, 2]);
tdyh <- as.numeric(data_rm_na[, 3]);
ratio_rm_na <- tdyh/tdvn;
dim(data_rm_na)
quantile(ratio_rm_na)
quantile(ratio_rm_na)
hist(ratio_rm_na)
density(ratio_rm_na)
quantile(ratio_rm_na)
hist(ratio_rm_na)
dens <- density(ratio_rm_na)
plot(dens)
filter <- ratio_rm_na[which(ratio_rm_na > 0.1)]
quantile(filter)
hist(filter)
dens <- density(filter)
plot(dens)
filter <- ratio_rm_na[which(ratio_rm_na > 0.5 & ratio_rm_na < 0.1)]
quantile(filter)
hist(filter)
filter <- ratio_rm_na[which(ratio_rm_na > 0.5 && ratio_rm_na < 0.1)]
quantile(filter)
hist(filter)
filter <- ratio_rm_na[which(ratio_rm_na > 0.05 && ratio_rm_na < 0.1)]
quantile(filter)
hist(filter)
which(ratio_rm_na > 0.05 && ratio_rm_na < 0.1)
which(ratio_rm_na > 0.05 && ratio_rm_na < 0.1)
ratio_rm_na
which(ratio_rm_na > 0.05)
which(ratio_rm_na > 0.05 && ratio_rm_na <0.1)
which(ratio_rm_na > 0.05 & ratio_rm_na <0.1)
filter <- ratio_rm_na[which(ratio_rm_na > 0.05 & ratio_rm_na < 0.1)]
quantile(filter)
hist(filter)
dens <- density(filter)
plot(dens)
filter <- ratio_rm_na[which(ratio_rm_na > 0.1 & ratio_rm_na < 0.2)]
quantile(filter)
hist(filter)
dens <- density(filter)
plot(dens)
filter <- ratio_rm_na[which(ratio_rm_na > 0.2)]
quantile(filter)
hist(filter)
dens <- density(filter)
plot(dens)
plot(density(ratio_rm_na))
filter <- ratio_rm_na[which(ratio_rm_na > 0.05 & ratio_rm_na < 0.12)]
quantile(filter)
hist(filter)
dens <- density(filter)
plot(dens)
filter <- ratio_rm_na[which(ratio_rm_na > 0.12 & ratio_rm_na < 0.2)]
quantile(filter)
hist(filter)
dens <- density(filter)
plot(dens)
filter <- ratio_rm_na[which(ratio_rm_na > 0.2)]
quantile(filter)
hist(filter)
dens <- density(filter)
plot(dens)
filter <- ratio_rm_na[which(ratio_rm_na > 0.05 & ratio_rm_na < 0.12)]
quantile(filter);
hist(filter);
dens <- density(filter);
plot(dens);
filter <- ratio_rm_na[which(ratio_rm_na > 0.12 & ratio_rm_na < 0.2)]
quantile(filter);
hist(filter);
dens <- density(filter);
plot(dens);
filter <- ratio_rm_na[which(ratio_rm_na > 0.2)]
quantile(filter);
hist(filter);
dens <- density(filter);
plot(dens);
filter <- ratio_rm_na[which(ratio_rm_na > 0.05 & ratio_rm_na < 0.12)]
quantile(filter);
hist(filter);
dens <- density(filter);
plot(dens);
filter <- ratio_rm_na[which(ratio_rm_na > 0.12 & ratio_rm_na < 0.2)]
quantile(filter);
hist(filter);
dens <- density(filter);
plot(dens);
filter <- ratio_rm_na[which(ratio_rm_na > 0.2)]
quantile(filter);
hist(filter);
dens <- density(filter);
plot(dens)
quantile(ratio_rm_na);
hist(ratio_rm_na);
dens <- density(ratio_rm_na);
plot(ratio_rm_na);
quantile(ratio_rm_na);
hist(ratio_rm_na);
dens <- density(ratio_rm_na);
plot(dens);
quantile(ratio_rm_na, c(seq(0.1, 0.1, 1)));
hist(ratio_rm_na);
dens <- density(ratio_rm_na);
plot(dens);
seq(0.1, 1)
seq(0.1, 0.1,  1)
0.1:0.1:1
0.1:1
quantile(ratio_rm_na));
quantile(ratio_rm_na);
hist(ratio_rm_na);
dens <- density(ratio_rm_na);
plot(dens);
index_filter <- which(ratio_rm_na > 0.1)
data_filter <- data_rm_na[index_filter, ]
write.csv(data_filter, sep = ",", file = "data_filter.csv")
index_filter <- which(ratio_rm_na > 0.1)
data_filter <- data_rm_na[index_filter, ]
write.table(data_filter, sep = "+", file = "data_filter.csv")
index_filter <- which(ratio_rm_na > 0.1)
data_filter <- data_rm_na[index_filter, ]
write.table(data_filter, sep = "+", file = "data_filter.csv", row.names = FALSE)
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(dtwclust)
library(stats)
require(doParallel)
require(DDoutlier)
library(hts)
source("../lib/data_description.R")
#balance_open <- read_customer_data("../data/balance_open.csv");
#balance_open_clean <- read_customer_data("../data/balance_open_clean.csv");
png("total_balance_series.png", width = 2000, height = 1200, res = 300)
y <- rowSums(balance_open_clean) / 10^3
balance_open <- read_customer_data("../data/balance_open.csv");
balance_open_clean <- read_customer_data("../data/balance_open_clean.csv");
png("total_balance_series.png", width = 2000, height = 1200, res = 300)
y <- rowSums(balance_open_clean) / 10^3
auto.arima(y)
plot(y, type = "l", lwd = 2, col = "midnightblue", xlab = "Months", ylab = "Balance (billion)", family = "A", axes = F, xlim = c(0, 50), ylim = c(500, 2500), font.lab = 2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
dev.off()
dim(balance_open)
png("sample.png", width=2000, height=1500, res=300)
windowsFonts(
A=windowsFont("Times New Roman"),
B=windowsFont("Bookman Old Style"),
C=windowsFont("Comic Sans MS"),
D=windowsFont("Symbol")
)
z <- balance_open[, 3]
plot(z, type = "l", lwd = 2, col = "midnightblue", xlab = "Months", ylab = "Balance (million)", family = "A", axes = F, xlim = c(0, 50), ylim = c(0, 500), font.lab = 2, cex.lab = 1.2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
for(i in 3:5){
lines(ts(balance_open[, i]), col = colors()[80+i], lwd=2)
}
dev.off()
#balance_smooth <- balanace_smooth(balance_open);
png("smooth.png", width=2000, height=1500, res=300)
windowsFonts(
A=windowsFont("Times New Roman"),
B=windowsFont("Bookman Old Style"),
C=windowsFont("Comic Sans MS"),
D=windowsFont("Symbol")
)
plot(balance_open[, 1], col = "red", type = "l", ylab = "Balance value (million)", xlab = "Months", lwd = 2, family = "A", axes = F, xlim = c(0, 50), ylim = c(0, 500), font.lab = 2, cex.lab = 1.2)
lines(balance_smooth[, 1], lty=1:2, col = "blue", lwd = 2)
balance_smooth <- balanace_smooth(balance_open);
source("../lib/preprocessing.R")
balance_smooth <- balanace_smooth(balance_open);
png("smooth.png", width=2000, height=1500, res=300)
windowsFonts(
A=windowsFont("Times New Roman"),
B=windowsFont("Bookman Old Style"),
C=windowsFont("Comic Sans MS"),
D=windowsFont("Symbol")
)
plot(balance_open[, 1], col = "red", type = "l", ylab = "Balance value (million)", xlab = "Months", lwd = 2, family = "A", axes = F, xlim = c(0, 50), ylim = c(0, 500), font.lab = 2, cex.lab = 1.2)
lines(balance_smooth[, 1], lty=1:2, col = "blue", lwd = 2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
legend("topleft", col = c("red", "blue"), legend = c("Before Smooth", "After Smooth"), lty = 1:1, lwd = 2)
dev.off()
balance_smooth_nor <- normalize(balance_smooth);
png("smooth_normalized.png", width=2000, height=1200, res=300)
windowsFonts(
A=windowsFont("Times New Roman"),
B=windowsFont("Bookman Old Style"),
C=windowsFont("Comic Sans MS"),
D=windowsFont("Symbol")
)
plot(balance_smooth_nor[, 1], type = "l", col = colors()[100], xlab = "Months", ylab = "", lwd = 2,
family = "A", axes = F, xlim = c(0, 50), font.lab = 2, cex.lab = 1.2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
for(i in 1:5){
lines(ts(balance_smooth_nor[, i]), col = colors()[80+i], lwd = 2)
}
dev.off()
source("../lib/preprocessing.R")
before_remove_anomally_pca <- prcomp(t(balance_smooth_nor))
before_remove_anomally_pca$sdev
png("pca_before.png", width=1500, height=1500, res=300)
plot(before_remove_anomally_pca$x[, 1:2], pch = 19, family = "A", axes = F, font.lab = 2, cex.lab = 1.2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
dev.off()
sorted_outlier_score <- get_outlier_score(balance_smooth_nor, 600)
png("sorted_outlier_score.png", width=2000, height=1200, res=300)
plot(sorted_outlier_score, type = "l", xlab = "", ylab = "Outlier Score", lwd = 2, family = "A", axes = F, font.lab = 2, cex.lab = 1.2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
dev.off()
source("../lib/preprocessing.R")
outlier_index <- filter_annomaly(sorted_outlier_score, 1300, balance_open, balance_smooth_nor);
png("pca_after.png", width=1500, height=1500, res=300)
plot(before_remove_anomally_pca$x[-as.integer(outlier_index), 1:2], xlim = c(-4, 2), ylim = c(-3, 3), pch = 19, family = "A", axes = F, font.lab = 2, cex.lab = 1.2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
dev.off()
source("../lib/preprocessing.R")
source("../lib/data_description.R")
balance_smooth_nor_cleans <- read_customer_data("../data/balance_smooth_nor_anomally.csv")
dim(balance_smooth_nor_cleans)
source("../lib/datadescription.R")
#best_clustering_result <- load_clustering_result("../result/clustering/clus_partitional_sdtw_sdtw.bin")[[2]]
#balance_open_clean <- read.csv("../data/balance_open_clean.csv", header = FALSE)
f <- summaryData(data = balance_open_clean, best_clustering_result@cluster)
source("../lib/datadescription.R")
best_clustering_result <- load_clustering_result("../result/clustering/clus_partitional_sdtw_sdtw.bin")[[2]]
source("../lib/preprocessing.R")
source("../lib/data_description.R")
balance_smooth_nor_cleans <- read_customer_data("../data/balance_smooth_nor_anomally.csv")
dim(balance_smooth_nor_cleans)
require(doParallel)
library(dtwclust)
source("../lib/data_description.R")
source("../lib/preprocessing.R")
cl <- makeCluster(detectCores())
invisible(clusterEvalQ(cl, {
library(dtwclust)
RcppParallel::setThreadOptions(2L)
}))
registerDoParallel(cl)
balance_clean <- read_customer_data("../data/balance_smooth_nor_clean.csv")
dim(balance_clean)
k_s <- 4
#clus_partitional_dtw_pam <- tsclust(t(balance_clean), type = "partitional", k = k_s, distance = "dtw")
#save_clustering_result(clus_partitional_dtw_pam, "../result/clustering/clus_partitional_dtw_pam1.bin")
#clus_partitional_dtw_dba <- tsclust(t(balance_clean), type = "partitional", k = k_s, distance = "dtw", centroid = "dba")
#save_clustering_result(clus_partitional_dtw_dba, "../result/clustering/clus_partitional_dtw_dba1.bin")
clus_partitional_sdtw_sdtw <- tsclust(t(balance_clean), type = "partitional", k = k_s, distance = "sdtw", centroid = "sdtw_cent")
save_clustering_result(clus_partitional_sdtw_sdtw, "../result/clustering/clus_partitional_sdtw_sdtw.bin")
#clus_hirarchical_dtw_pam <- tsclust(t(balance_clean), type = "hierarchical", k = k_s, distance = "dtw")
#save_clustering_result(clus_hirarchical_dtw_pam, "../result/clustering/clus_hirarchical_dtw1.bin")
#clus_hirarchical_sdtw_sdtw <- tsclust(t(balance_clean), type = "hierarchical", k = k_s, distance = "sdtw")
#save_clustering_result(clus_hirarchical_sdtw_sdtw, "../result/clustering/clus_hirarchical_sdtw1.bin")
source("../lib/datadescription.R")
best_clustering_result <- load_clustering_result("../result/clustering/clus_partitional_sdtw_sdtw.bin")[[1]]
source("../lib/datadescription.R")
best_clustering_result <- load_clustering_result("../result/clustering/clus_partitional_sdtw_sdtw.bin")
balance_open_clean <- read.csv("../data/balance_open_clean.csv", header = FALSE)
f <- summaryData(data = balance_open_clean, best_clustering_result@cluster)
kable(f, digits = 2)
png("cluster_series.png", height = 1500, width = 2000, res = 300)
arima <- arima_model_cluster(balance_open_clean, best_clustering_result@cluster)
arima
dev.off()
View(balance_smooth)
balance_open <- read_customer_data("../data/balance_open.csv");
#balance_open_clean <- read_customer_data("../data/balance_open_clean.csv");
#png("total_balance_series.png", width = 2000, height = 1200, res = 300)
#y <- rowSums(balance_open_clean) / 10^3
#auto.arima(y)
#plot(y, type = "l", lwd = 2, col = "midnightblue", xlab = "Months", ylab = "Balance (billion)", family = "A", axes = F, xlim = c(0, 50), ylim = c(500, #2500), font.lab = 2)
#axis(1, family = 'A', font = 2)
#axis(2, family = 'A', font = 2)
#dev.off()
dim(balance_open)
png("sample.png", width=2000, height=1500, res=300)
windowsFonts(
A=windowsFont("Times New Roman"),
B=windowsFont("Bookman Old Style"),
C=windowsFont("Comic Sans MS"),
D=windowsFont("Symbol")
)
z <- balance_open[, 3]
plot(z, type = "l", lwd = 2, col = "midnightblue", xlab = "Months", ylab = "Balance (million)", family = "A", axes = F, xlim = c(0, 50), ylim = c(0, 500), font.lab = 2, cex.lab = 1.2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
for(i in 3:5){
lines(ts(balance_open[, i]), col = colors()[80+i], lwd=2)
}
dev.off()
source("../lib/preprocessing.R")
balance_smooth <- balanace_smooth(balance_open);
png("smooth.png", width=2000, height=1500, res=300)
windowsFonts(
A=windowsFont("Times New Roman"),
B=windowsFont("Bookman Old Style"),
C=windowsFont("Comic Sans MS"),
D=windowsFont("Symbol")
)
plot(balance_open[, 1], col = "red", type = "l", ylab = "Balance value (million)", xlab = "Months", lwd = 2, family = "A", axes = F, xlim = c(0, 50), ylim = c(0, 500), font.lab = 2, cex.lab = 1.2)
lines(balance_smooth[, 1], lty=1:2, col = "blue", lwd = 2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
legend("topleft", col = c("red", "blue"), legend = c("Before Smooth", "After Smooth"), lty = 1:1, lwd = 2)
dev.off()
balance_smooth_nor <- normalize(balance_smooth);
png("smooth_normalized.png", width=2000, height=1200, res=300)
windowsFonts(
A=windowsFont("Times New Roman"),
B=windowsFont("Bookman Old Style"),
C=windowsFont("Comic Sans MS"),
D=windowsFont("Symbol")
)
plot(balance_smooth_nor[, 1], type = "l", col = colors()[100], xlab = "Months", ylab = "", lwd = 2,
family = "A", axes = F, xlim = c(0, 50), font.lab = 2, cex.lab = 1.2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
for(i in 1:5){
lines(ts(balance_smooth_nor[, i]), col = colors()[80+i], lwd = 2)
}
dev.off()
source("../lib/preprocessing.R")
before_remove_anomally_pca <- prcomp(t(balance_smooth_nor))
before_remove_anomally_pca$sdev
png("pca_before.png", width=1500, height=1500, res=300)
plot(before_remove_anomally_pca$x[, 1:2], pch = 19, family = "A", axes = F, font.lab = 2, cex.lab = 1.2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
dev.off()
sorted_outlier_score <- get_outlier_score(balance_smooth_nor, 600)
png("sorted_outlier_score.png", width=2000, height=1200, res=300)
plot(sorted_outlier_score, type = "l", xlab = "", ylab = "Outlier Score", lwd = 2, family = "A", axes = F, font.lab = 2, cex.lab = 1.2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
dev.off()
source("../lib/preprocessing.R")
outlier_index <- filter_annomaly(sorted_outlier_score, 1300, balance_open, balance_smooth_nor);
png("pca_after.png", width=1500, height=1500, res=300)
plot(before_remove_anomally_pca$x[-as.integer(outlier_index), 1:2], xlim = c(-4, 2), ylim = c(-3, 3), pch = 19, family = "A", axes = F, font.lab = 2, cex.lab = 1.2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
dev.off()
source("../lib/preprocessing.R")
outlier_index <- filter_annomaly(sorted_outlier_score, 1300, balance_open, balance_smooth_nor);
write.table(outlier_index, file = "outlier_index.csv", header = FALSE)
source("../lib/preprocessing.R")
outlier_index <- filter_annomaly(sorted_outlier_score, 1300, balance_open, balance_smooth_nor);
write.table(outlier_index, file = "outlier_index.csv", row.names = FALSE, col.names = FALSE)
png("pca_after.png", width=1500, height=1500, res=300)
plot(before_remove_anomally_pca$x[-as.integer(outlier_index), 1:2], xlim = c(-4, 2), ylim = c(-3, 3), pch = 19, family = "A", axes = F, font.lab = 2, cex.lab = 1.2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
dev.off()
source("../lib/datadescription.R")
best_clustering_result <- load_clustering_result("../result/clustering/clus_partitional_sdtw_sdtw.bin")
balance_open_clean <- read.csv("../data/balance_open_clean.csv", header = FALSE)
f <- summaryData(data = balance_open_clean, best_clustering_result@cluster)
kable(f, digits = 2)
png("cluster_series.png", height = 1500, width = 2000, res = 300)
arima <- arima_model_cluster(balance_open_clean, best_clustering_result@cluster)
arima
dev.off()
png("total_balance_series.png", width = 2000, height = 1200, res = 300)
y <- rowSums(balance_open_clean) / 10^3
auto.arima(y)
plot(y, type = "l", lwd = 2, col = "midnightblue", xlab = "Months", ylab = "Balance (billion)", family = "A", axes = F, xlim = c(0, 50), ylim = c(500, 2500), font.lab = 2)
axis(1, family = 'A', font = 2)
axis(2, family = 'A', font = 2)
dev.off()
